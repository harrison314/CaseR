using System;
using System.Collections.Generic;
using System.Text;

namespace CaseR.SourceGenerator;

internal static class CaseRRegistrationRenderer
{
    public static string RenderRegistrationFile(List<UseCaseImplDefinitions> useCaseDefinitions,
        List<DomainHandlerImplDefinitions> domainEvenest)
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine("// Auto-generated registration fo CaseR");
        sb.AppendLine("// </auto-generated>");
        sb.AppendLine();

        sb.Append($$$""""

                namespace Microsoft.Extensions.DependencyInjection;

                /// <summary>
                /// CaseR registration extensions for Microsoft.Extensions.DependencyInjection.
                /// </summary>
                public static class CaseRGeneratorExtensions
                {

                    /// <summary>
                    /// Adds all use cases interactors and domain event handler with this assembly.
                    /// </summary>
                    /// <param name="services">The <see cref="IServiceCollection"/>.</param>
                    public static void AddCaseRInteractors(this IServiceCollection services)
                    {
                        System.ArgumentNullException.ThrowIfNull(services);
                    

                """");

        foreach (UseCaseImplDefinitions def in useCaseDefinitions)
        {
            string className = def.ClassDefinition.Symbol.ToString();
            sb.Append($$$""""
                        services.Add(new ServiceDescriptor(typeof({{{className}}}), typeof({{{className}}}), ServiceLifetime.Scoped));

                """");
        }

        sb.Append($$$""""
                
                       // Domain events registrations

                """");

        foreach (DomainHandlerImplDefinitions def in domainEvenest)
        {
            if (def.TDomainEvent == null)
            {
                string className = def.ClassDefinition.Symbol.ConstructUnboundGenericType().ToString();
                sb.Append($$$""""
                       services.Add(new ServiceDescriptor(typeof(global::CaseR.IDomainEventHandler<>), typeof({{{className}}}), ServiceLifetime.Scoped));

                """");
            }
            else
            {
                string className = def.ClassDefinition.Symbol.ToString();
                sb.Append($$$""""
                       services.Add(new ServiceDescriptor(typeof(global::CaseR.IDomainEventHandler<{{{def.TDomainEvent}}}>), typeof({{{className}}}), ServiceLifetime.Scoped));

                """");
            }
        }

        sb.Append($$$""""
                    }
                }

                """");

        return sb.ToString();
    }
}
